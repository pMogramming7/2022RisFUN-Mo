knitr::purl('environment.Rmd', documentation = 0)
xfun::embed_file('environment.Rmd')
knitr::purl('environment.Rmd', documentation = 0)
xfun::embed_file('environment.Rmd')
xfun::embed_file('environment.R')
knitr::purl('environment.Rmd', documentation = 0)
xfun::embed_file('environment.Rmd')
xfun::embed_file('environment.R')
xfun::embed_file('DATA/reef_fish.xlsx')
knitr::purl('environment.Rmd', documentation = 0)
xfun::embed_file('environment.Rmd')
xfun::embed_file('environment.R')
xfun::embed_file('Data/reef_fish.xlsx')
Tw.corals <-read.table('Data/tw_corals.txt', header=T, sep='\t', dec='.')
Tw.corals
Tw.corals <-read.table('Data/tw_corals.txt', header=T, sep='\t', dec='.')
Tw.corals
read_excel('Data/reef_fish.xlsx') # automatically print on my screen
readxl::read_xlsx('Data/reef_fish.xlsx') # automatically print on my screen
fish<-readxl::read_xlsx('Data/reef_fish.xlsx') # store my table in an object called `fish`
readxl:: read_xlsx ('Data/reef_fish.xlsx')
readxl:: read_xlsx ('Data/reef_fish.xlsx') # automatically print on my screen
getwd
getwd()
readxl:: read_xlsx ('Data/reef_fish.xlsx') # automatically print on my screen
## # R update (to run in R native GUI only)
## if(!require(installr)) {
##   install.packages("installr"); require(installr)}
## updateR()
## # install the package `abc` with its name
## install.packages("abc")
## # function are case sensitive
## # all information after `#` is ignored
## # it is call a comment. Commenting is very important
## # use/load the package `abc` with its name
## library("abc")
## # Install & load `vegan` package
## install.packages('vegan')
## library('vegan')
# simple help on the use of a function
median
## # detailed help on the use of a function
## ?median # alternative 1
## help(median) # alternative 2
## # using a keyword for search
## ??median
## # get your current working directory
## getwd()
## # set your current working directory
## setwd()
## # Use R as a calculator
## 3+2 # addition
## 3-2 # substraction
## 3*2 # multiplication
## 3/2 # division
## 3^3 # power
## log(2) # logarithm
## exp(2) # exponential
## (5 + 3) / 4 # define priority using () or {}
## pi*4 # common function
# my current list is empty
ls()
# I create and list 3 objects
a<-'corals' # create an object 'a' containing 'corals'
b<-'are' # create an object 'b' containing 'are'
c<-'cool'# create an object 'c' containing 'cool'
ls() # list objects 'a', 'b', 'c'
# clean objects in memory
rm(list=ls())
# 1. using the package `readxl`
# 2. reading my `reef_fish.xlsx` in my working directory
# 3. importing `reef_fish.xlsx` in a `fish` object
library(readxl) # load the package `readxl'
readxl:: read_xlsx ('Data/reef_fish.xlsx') # automatically print on my screen
fish<-readxl:: read_xlsx ('Data/reef_fish.xlsx') # store my table in an object called `fish`
fish # print my object `fish`
# importing a .txt file
fish<-read.table('Data/reef_fish.txt', header=T, sep='\t', dec='.')
## # import file by path name
## fish<-read.table ("D:/.../Topic 1/Data/reef_fish.txt",header = TRUE,sep="\t", dec=".")# long version
## fish<-read.table("D:/.../Topic 1/Data/reef_fish.txt", TRUE, "\t",".")# short version
## fish<-read.table(file.choose (), header = TRUE,sep="\t", dec=".")
## # Too fast you need to try by yourself?
## # Maybe a look at ?write.table may help
## q()
# import data set and create an object in R studio + simple plot
fish<-read.table('Data/reef_fish.txt', header=T, sep='\t', dec='.')
barplot(fish$richness, main="Top 10 reef fish Richness (Allen, 2000)", horiz=TRUE, names.arg=fish$country, cex.names=0.5, las=1)
rm(list=ls())
Tw,corals_wide <- pivot_wider(TW_corals_long, names_from = Region, values_from = Richness)
Tw.corals_wide <- pivot_wider(TW_corals_long, names_from = Region, values_from = Richness)
Tw,corals_wide <- pivot_wider(Tw.corals_long, names_from = Region, values_from = Richness)
Tw.corals_wide <- pivot_wider(Tw.corals_long, names_from = Region, values_from = Richness)
Tw.corals_long <- TW_corals %>% pivot_longer(Southern_TW:Northern_Is, names_to = "Region", values_to = "Richness")
Tw.corals <-read.table('Data/tw_corals.txt', header=T, sep='\t', dec='.')
Tw.corals
Tw.corals_long <- Tw.corals %>% pivot_longer(Southern_TW:Northern_Is, names_to = "Region", values_to = "Richness")
Tw.corals_long
Tw,corals_wide <- pivot_wider(Tw.corals_long, names_from = Region, values_from = Richness)
Tw.corals_wide <- pivot_wider(Tw.corals_long, names_from = Region, values_from = Richness)
Tw.corals_wide
income.world<-read.table('Data/metoo.txt',header=T, sep="\t", dec=".", na.strings = "n/a")
income.world
income.world_long <- income.world %>% pivot_longer(cols = -state,
names_to = c("gender", "work")
names_sep = "-"
income.world_long <- income.world %>% pivot_longer(cols = -state,
names_to = c("gender", "work")
names_sep = "-"
income.world_long <- income.world %>% pivot_longer(cols = -state,
names_to = c("gender", "work"),
names_sep = "-",
values = "income")
income.world_long
income.world_long <- income.world %>% pivot_longer(cols = -state,
names_to = c("gender", "work"),
names_sep = "-",
values = "income")
income.world_long <- income.world %>% pivot_longer(cols = -state,
names_to = c("gender", "work"),
names_sep = "-",
values_to = "income")
income.world_long
income.world_long <- income.world %>% pivot_longer(cols = -state,
names_to = c("gender", "work"),
names_sep = "-",
values_to = "income",
na.strings = "n/a")
income.world_long <- income.world %>% pivot_longer(cols = -state,
names_to = c("gender", "work"),
names_sep = "-",
values_to = "income")
income.world_long %>% pivot_wider(names_from = c(gender,work),
values_from = income,
names_sep = ".")
income.world_long_var <- income.world %>%  pivot_longer(cols = -1,
names_to = "var1",
values_to = "income")
income.world_long_var
income.world_sep <- income_long_var %>%  separate(col = var1,
sep = "_",
into = c("gender", "work"))
library (tidyr)
TW_corals<-read.table('Data/tw_corals.txt', header=T, sep='\t', dec='.')
TW_corals
TW_corals_long <- TW_corals %>% pivot_longer(Southern_TW:Northern_Is, names_to = "Region", values_to = "Richness")
# TW_corals_long <-TW_corals %>% pivot_longer(cols = everything(), names_to = "Region", values_to = "Richness")
TW_corals_long
TW_corals_wide <- pivot_wider(TW_corals_long, names_from = Region, values_from = Richness)
TW_corals_wide
income<-read.table('Data/metoo.txt',header=T, sep="\t", dec=".", na.strings = "n/a")
income
income_long <- income %>%  pivot_longer(cols = -state,
names_to = c("gender","work"),
names_sep = "_",
values_to = "income")
income_long
income_long %>% pivot_wider(names_from = c(gender,work),
values_from = income,
names_sep = ".")
# Let's first create a delimited table
income_long_var <- income %>%  pivot_longer(cols = -1,
names_to = "var1",
values_to = "income")
income_long_var
# Split var1 column into two columns
income_sep <- income_long_var %>%  separate(col = var1,
sep = "_",
into = c("gender", "work"))
income_sep
income_long_var %>% separate_rows(var1, sep = "_")
income.world_long <- income.world %>% pivot_longer(cols = -state,
names_to = c("gender", "work"),
names_sep = "_",
values_to = "income")
income.world_long
income.world_long %>% pivot_wider(names_from = c(gender,work),
values_from = income,
names_sep = ".")
income.world_long_var
income.world_sep <- income_long_var %>%  separate(col = var1,
sep = "_",
into = c("gender", "work"))
income.world_sep
income.world_long_var %>% separate_rows(var1, sep = "_")
income.world_long_var
income.world_long_var <- income.world %>%  pivot_longer(cols = -1,
names_to = "var1",
values_to = "income")
income.world_long_var
income.world_long_var %>% separate_rows(var1, sep = "_")
income
income_long <- income %>%  pivot_longer(cols = -state,
names_to = c("gender","work"),
names_sep = "_",
values_to = "income")
income_long
income.world<-read.table('Data/metoo.txt',header=T, sep="\t", dec=".", na.strings = "n/a")
income.world
income.world_long <- income.world %>% pivot_longer(cols = -state,
names_to = c("gender", "work"),
names_sep = "_",
values_to = "income") #separation is underbar,"_"
income.world_long
income.world_long %>% pivot_wider(names_from = c(gender,work),
values_from = income,
names_sep = ".")
income.world_sep2 <- income %>% pivot_longer(cols = -1,
names_to = "var1",
values_to = "income")
income.world_sep2
income.world_sep2 <- income %>% pivot_longer(cols = -1,
names_to = "var1",
values_to = "income") %>%
income.world_sep2
income.world_sep2 <- income %>% pivot_longer(cols = -1,
names_to = "var1",
values_to = "income") %>%
income.world_sep2
income.world_sep2 <- income %>% pivot_longer(cols = -1,
names_to = "var1",
values_to = "income")%>%
income.world_sep2
income.world_sep2 <- income %>% pivot_longer(cols = -1,
names_to = "var1",
values_to = "income")
income.world_sep2 <- income %>% pivot_longer(cols = -1,
names_to = "var1",
values_to = "income")%>%
income.world_sep2
income.world
#create a dummy variable for manipulation
income.world_long_var <- income.world %>%  pivot_longer(cols = -1,
names_to = "var1",
values_to = "income")
#create a dummy variable for manipulation
income.world_long_var <- income.world %>%  pivot_longer(cols = -1,
names_to = "var1",
values_to = "income")
income.world_long_var
rm(list=ls())
install.packages("tidyr")
library (tidyr)
#Pivoting
Tw.corals <-read.table('Data/tw_corals.txt', header=T, sep='\t', dec='.')
Tw.corals
#turn wide table to long table
Tw.corals_long <- Tw.corals %>% pivot_longer(Southern_TW:Northern_Is, names_to = "Region", values_to = "Richness")
Tw.corals_long
#turn long table to wide table
Tw.corals_wide <- pivot_wider(Tw.corals_long, names_from = Region, values_from = Richness)
Tw.corals_wide
income.world<-read.table('Data/metoo.txt',header=T, sep="\t", dec=".", na.strings = "n/a")
income.world
#rearrange variables by separating them
income.world_long <- income.world %>% pivot_longer(cols = -state,
names_to = c("gender", "work"),
names_sep = "_",
values_to = "income") #separation is underbar,"_"
income.world_long
#you can also merge those back
income.world_long %>% pivot_wider(names_from = c(gender,work),
values_from = income,
names_sep = ".")
#create a dummy variable for manipulation
income.world_long_var <- income.world %>%  pivot_longer(cols = -1,
names_to = "var1",
values_to = "income")
income.world_long_var
#split dummy "var1" to two columns
income.world_sep <- income_long_var %>%  separate(col = var1,
sep = "_",
into = c("gender", "work"))
rm(list=ls())
library (tidyr)
#Pivoting
Tw.corals <-read.table('Data/tw_corals.txt', header=T, sep='\t', dec='.')
Tw.corals
#turn wide table to long table
Tw.corals_long <- Tw.corals %>% pivot_longer(Southern_TW:Northern_Is, names_to = "Region", values_to = "Richness")
Tw.corals_long
#turn long table to wide table
Tw.corals_wide <- pivot_wider(Tw.corals_long, names_from = Region, values_from = Richness)
Tw.corals_wide
income.world<-read.table('Data/metoo.txt',header=T, sep="\t", dec=".", na.strings = "n/a")
income.world
#rearrange variables by separating them
income.world_long <- income.world %>% pivot_longer(cols = -state,
names_to = c("gender", "work"),
names_sep = "_",
values_to = "income") #separation is underbar,"_"
income.world_long
#you can also merge those back
income.world_long %>% pivot_wider(names_from = c(gender,work),
values_from = income,
names_sep = ".")
#create a dummy variable for manipulation
income.world_long_var <- income.world %>%  pivot_longer(cols = -1,
names_to = "var1",
values_to = "income")
income.world_long_var
#split dummy "var1" to two columns
income.world_sep <- income_long_var %>%  separate(col = var1,
sep = "_",
into = c("gender", "work"))
#split dummy "var1" to two columns
income.world_sep <- income.world_long_var %>%  separate(col = var1,
sep = "_",
into = c("gender", "work"))
income.world_sep
#also you can separate them in original column by split them in rows
income.world_long_var %>% separate_rows(var1, sep = "_")
Rairuoho <- read.table('Data/rairuoho.txt')
Rairuoho <- read.table('Data/rairuoho.txt, header=T, sep="\t', na.strings = "n/a")
Rairuoho <- read.table('Data/rairuoho.txt, header=T, sep="\t", na.strings = "n/a")
Rairuoho
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo =TRUE)
Rairuoho <- read.table('Data/rairuoho.txt, header=T, sep="\t", na.strings = "n/a")
Rairuoho <- read.table('Data/rairuoho.txt, header=T, sep="\t", na.strings = "n/a")
Rairuoho<-read.table('Data/rairuoho.txt, header=T, sep="\t", na.strings = "n/a")
Rairuoho<-read.table("Data/rairuoho.txt", header=T, sep="\t", na.strings = "n/a")
```{r, echo=FALSE}
```{r, echo= FALSE }
```{r rairuoho, echo= FALSE }
rairuoho<-read.table("Data/rairuoho.txt", header=T, sep="\t", na.strings = "n/a")
rairuoho
rairuoho<-read.table("Data/rairuoho.txt", header=T, sep="\t", na.strings = "n/a")
rairuoho
rm(list=ls())# clean memory
#call out library
library(datasets) #this is default packages in R
rm(list=ls())# clean memory
#call out library
library(datasets) #this is default packages in R
#remove existing list(all things in environment)
rm(list = ls())
data(iris) # import dataset
# 'data' automatically  creates the object 'iris'
head (iris) # visualize 'head' dataset 只看前幾行
summary(iris) #  object summary
#including 中位數、四分衛數、平均值
str(iris) #可以看組成和性質
fix(iris) # spreadsheet 另開視窗可以直接改資料
#用網路資料來分析
students<-read.table('https://www.dipintothereef.com/uploads/3/7/3/5/37359245/students.txt',header=T, sep="\t", dec='.') # read data set from url
str(students)
#選column
students$height
#subset
students$gender=="female" # condition 抓出性別那行是female的
f<-students$gender=="female" # filter 把符合條件的裝到f
females<-students[f,] # selection 資料student中選f那列，f只符合剛剛設的條件
females
#將females這個資料框加入列名
rownames(females)<-c('Vanessa', 'Vicky', 'Michelle', 'Joyce', 'Victoria')
females
#Sample(隨機抽樣)隨機選一範圍的數字(類似抽籤，抽幾個)
rs <- sample(1:nrow(females), 3)
females[rs,] #秀出剛剛符合條件(rs)的
#Sorting
#order()排名的概念，預設排小到大，出現的數字代表原本列號
or <- order(students$height)
students[or,]
orr <- order(-students$height) #加負號變排大到小
students[orr,]
order(students$height,decreasing =T) #跟上面加負號一樣
#Recording 這邊老師用判斷式ifelse，並且把TRUE的變成blue,FALSE的變成red
colors<-ifelse(students$gender=='male', 'blue','red')
colors
# create a new column-colors
students$colors<-ifelse(students$gender=='male','green','yellow')
# replace an existing column
students$gender<-ifelse(students$gender=='male', 'blue','red')
#Practice2.2
#create a new variable with flower colors
iris$color <- ifelse(iris$Species == 'setosa','purple',ifelse(iris$Species == 'versicolor','blue','pink'))
iris
#Sort individuals by decreasing Sepal.Width.
sort <- order(iris$Sepal.Width, decreasing = T)
BtoS <- iris[sort,] #把order的結果帶回去iris重新排順序
BtoS[nrow(iris),] #叫出最後一個row
#having the smallest sepal width
min(iris$Sepal.Width) #得知是2
min2<-iris$Sepal.Width==2
iris[min2,]
irisordered<-order(-iris$Petal.Length)
#Practice2.1
#setosa
s <- iris$Species == 'setosa'
catseto <- iris[s,]
#versicolors
ve<- iris$Species == 'versicolor'
catversi <- iris[ve,]
#virginica
vi<- iris$Species == 'virginica'
catvirg <- iris[vi,]
head(catversi)
subset(catversi[,1:5]) #for homework
# catversi$color<-NULL # (this will let "color column" lost, Be Careful!!!)
head(catversi)
callseto<- data.frame(matrix(ncol=0,nrow=50))
callseto$Sepal.Length= catseto$Sepal.Length
callseto$Petal.Length= catseto$Petal.Length
callseto$color= catseto$color
callseto
subset$Rairuoho[1:11]
subset(Rairuoho[1:11])
subset$Rairuoho(rairuoho[1:11])
subset(rairuoho[1:11])
rairuoho<-read.table("Data/rairuoho.txt", header=T, sep="\t", na.strings = "n/a")
rairuoho
subset(rairuoho[1:11])
subset(rairuoho[1:11])
head(rairuoho)
(rairuoho)
head(Rairuoho)
head(rairuoho)
subset(rairuoho[1:11])
subset(rairuoho[1:11])
head(rairuoho)
subset(rairuoho[1:11])
subset()
head(rairuoho)
Rairuoho <- subset(rairuoho[1:11])
Rairuoho
Rairuoho %>% pivot_longer(cols = startsWith("days"),
names_to = "day",
names_prefix = "day",
values_to = "length",
values_drop_na = "TRUE")
Rairuoho %>% pivot_longer(cols = starts_with("days"),
names_to = "day",
names_prefix = "day",
values_to = "length",
values_drop_na = "TRUE")
Rairuoho %>% pivot_longer(cols = starts_with("days"),
names_to = "day",
names_prefix = "day",
values_to = "length",
values_drop_na = "TRUE") %>%
Rairuoho %>% pivot_longer(cols = starts_with("days"),
names_to = "day",
names_prefix = "day",
values_to = "length",
values_drop_na = "TRUE") %>%
Rairuoho
Rairuoho %>% pivot_longer(cols = starts_with("days"),
names_to = "day",
names_prefix = "day",
values_to = "length",
values_drop_na = "TRUE") %>%
Rairuoho
Rairuoho %>% pivot_longer(cols = starts_with("days"),
names_to = "day",
names_prefix = "day",
values_to = "length",
values_drop_na = "TRUE")
Rairuoho <- subset(rairuoho[1:11])
Rairuoho
Rairuoho %>% pivot_longer(cols = starts_with("days"),
names_to = "day",
names_prefix = "day",
values_to = "length",
values_drop_na = "TRUE")
Rairuoho <- subset(rairuoho[1:11])
Rairuoho
Rairuoho%>%pivot_longer(cols = starts_with("days"),
names_to = "day",
names_prefix = "day",
values_to = "length",
values_drop_na = "TRUE")
Rairuoho%>%pivot_longer(cols = starts_with("day"),
names_to = "day",
names_prefix = "day",
values_to = "length",
values_drop_na = "TRUE")
library(tidyr)
Rairuoho <- subset(rairuoho[1:11])
Rairuoho
Rairuoho%>%pivot_longer(cols = starts_with("day"),
names_to = "day",
names_prefix = "day",
values_to = "length",
values_drop_na = "TRUE")
Rairuoho
Rairuoho
Rairuoho%>%pivot_longer(cols = starts_with("day"),
names_to = "day",
names_prefix = "day",
values_to = "length",
values_drop_na = "TRUE")
Rairuoho
Rairuoho <- subset(rairuoho[1:11])
Rairuoho
Rairuoho.days <- Rairuoho %>%pivot_longer(cols=starts_with("day"),
names_to = "day",
names_prefix = "day",
values_to = "length",
values_drop_na = "TRUE")
Rairuoho.days
Rairuoho.unite <- Rairuoho.days %>% unite("sp_coor", 4:5, remove = TRUE)
Rairuoho.unite
library(tidyr)
rairuoho<-read.table("Data/rairuoho.txt", header=T, sep="\t", na.strings = "n/a")
library(tidyr)
rairuoho<-read.table("D:/R_WD/Git linked/2022RisFUN-Mo/Data", header=T, sep="\t", na.strings = "n/a")
library(tidyr)
rairuoho<-read.table("D:/R_WD/Git linked/2022RisFUN-Mo/Data", header=T, sep="\t", na.strings = "n/a")
rairuoho <- read.table("D:/R_WD/Git linked/2022RisFUN-Mo/Data/rairuoho.txt", header=T, sep="\t", na.strings = "n/a")
rairuoho <- read.table("Data/rairuoho.txt", header=T, sep="\t", na.strings = "n/a")
rairuoho <- read.table("Data.manipulation/rairuoho.txt", header=T, sep="\t", na.strings = "n/a")
