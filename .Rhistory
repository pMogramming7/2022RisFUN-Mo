equ(1,0)
}, interval = 0.25, movie.name = "species1_alone.gif")
saveGIF({
equ(1,0)
}, interval = 0.25, movie.name = "species1_alone.gif")
saveGIF({
equ(0,1)
}, interval = 0.25, movie.name = "species2_alone.gif")
saveGIF({
equ(0,1)
}, interval = 0.25, movie.name = "species2_alone.gif")
equ <- function(x1,x2){
num_gen <- 30
generation <- 1:num_gen
N1 <- rep (0, num_gen)
N2 <- rep (0, num_gen)
a12 <- 0.6
a21 <- 1.2
K1 <- 100
K2 <- 120
N1[1] <- x1
N2[1] <- x2
for (i in 2:num_gen) {
N1[i] = N1[i-1] + (3.2* N1[i-1] * ((K1-N1[i-1]-(a12*N2[i-1]))/K1))
N2[i] = N2[i-1] + (1.1* N2[i-1] * ((K2-N2[i-1]-(a21*N1[i-1]))/K2))
generation[1]=1
print (N1[i])
if (N1[1]>0){
plot(N1~generation,typ="b",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}  else {
plot(N1~generation,typ="n",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}
print(N2[i])
if (N2[1]>0){
lines(N2~generation,typ="b",col=3,ylim=c(0,min(c(K1+20,K2+20))),ylab="N")} else {
plot(N2~generation,typ="n",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}
}
}
saveGIF({
equ(6,6)
}, interval = 0.1, movie.name = "competing_model.gif")
saveGIF({
equ(1,0)
}, interval = 0.25, movie.name = "species1_alone.gif")
equ <- function(x1,x2){
num_gen <- 30
generation <- 1:num_gen
N1 <- rep (0, num_gen)
N2 <- rep (0, num_gen)
a12 <- 0.6
a21 <- 1.2
K1 <- 100
K2 <- 120
N1[1] <- x1
N2[1] <- x2
for (i in 2:num_gen) {
N1[i] = N1[i-1] + (3.2* N1[i-1] * ((K1-N1[i-1]-(a12*N2[i-1]))/K1))
N2[i] = N2[i-1] + (1.1* N2[i-1] * ((K2-N2[i-1]-(a21*N1[i-1]))/K2))
generation[1]=1
print (N1[i])
if (x1>0){
plot(N1~generation,typ="b",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}  else {
plot(N1~generation,typ="n",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}
print(x2)
if (N2[1]>0){
lines(N2~generation,typ="b",col=3,ylim=c(0,min(c(K1+20,K2+20))),ylab="N")} else {
plot(N2~generation,typ="n",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}
}
}
saveGIF({
equ(6,6)
}, interval = 0.1, movie.name = "competing_model.gif")
saveGIF({
equ(1,0)
}, interval = 0.25, movie.name = "species1_alone.gif")
saveGIF({
equ(0,1)
}, interval = 0.25, movie.name = "species2_alone.gif")
equ <- function(x1,x2){
num_gen <- 30
generation <- 1:num_gen
N1 <- rep (0, num_gen)
N2 <- rep (0, num_gen)
a12 <- 0.6
a21 <- 1.2
K1 <- 100
K2 <- 120
N1[1] <- x1
N2[1] <- x2
for (i in 2:num_gen) {
N1[i] = N1[i-1] + (3.2* N1[i-1] * ((K1-N1[i-1]-(a12*N2[i-1]))/K1))
N2[i] = N2[i-1] + (1.1* N2[i-1] * ((K2-N2[i-1]-(a21*N1[i-1]))/K2))
generation[1]=1
print (N1[i])
if (x1>0){
plot(N1~generation,typ="b",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}  else {
plot(N1~generation,typ="n",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}
print(x2)
if (x2>0){
lines(N2~generation,typ="b",col=3,ylim=c(0,min(c(K1+20,K2+20))),ylab="N")} else {
plot(N2~generation,typ="n",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}
}
}
saveGIF({
equ(6,6)
}, interval = 0.1, movie.name = "competing_model.gif")
saveGIF({
equ(1,0)
}, interval = 0.25, movie.name = "species1_alone.gif")
saveGIF({
equ(1,0)
}, interval = 0.25, movie.name = "species1_alone.gif")
saveGIF({
equ(0,1)
}, interval = 0.25, movie.name = "species2_alone.gif")
saveGIF({
equ(0,1)
}, interval = 0.25, movie.name = "species2_alone.gif")
e
equ <- function(x1,x2){
num_gen <- 30
generation <- 1:num_gen
N1 <- rep (0, num_gen)
N2 <- rep (0, num_gen)
a12 <- 0.6
a21 <- 1.2
K1 <- 100
K2 <- 120
N1[1] <- x1
N2[1] <- x2
for (i in 2:num_gen) {
N1[i] = N1[i-1] + (3.2* N1[i-1] * ((K1-N1[i-1]-(a12*N2[i-1]))/K1))
N2[i] = N2[i-1] + (1.1* N2[i-1] * ((K2-N2[i-1]-(a21*N1[i-1]))/K2))
generation[1]=1
print (N1[i])
if (N1[1]>0){
plot(N1~generation,typ="b",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}  else {
plot(N1~generation,typ="n",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}
print(N2[i])
if (N2[1]>0){
lines(N2~generation,typ="b",col=3,ylim=c(0,min(c(K1+20,K2+20))),ylab="N")} else {NULL
}
}
}
saveGIF({
equ(1,0)
}, interval = 0.25, movie.name = "species1_alone.gif")
saveGIF({
equ(6,6)
}, interval = 0.1, movie.name = "competing_model.gif")
equ <- function(x1,x2){
num_gen <- 30
generation <- 1:num_gen
N1 <- rep (0, num_gen)
N2 <- rep (0, num_gen)
a12 <- 0.6
a21 <- 1.2
K1 <- 100
K2 <- 120
N1[1] <- x1
N2[1] <- x2
for (i in 2:num_gen) {
N1[i] = N1[i-1] + (3.2* N1[i-1] * ((K1-N1[i-1]-(a12*N2[i-1]))/K1))
N2[i] = N2[i-1] + (1.1* N2[i-1] * ((K2-N2[i-1]-(a21*N1[i-1]))/K2))
generation[1]=1
print (N1[i])
if (N1[1]>0){
plot(N1~generation,typ="b",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}  else {NULL}
print(N2[i])
if (N2[1]>0){
lines(N2~generation,typ="b",col=3,ylim=c(0,min(c(K1+20,K2+20))),ylab="N")} else {NULL}}
}
saveGIF({
equ(6,6)
}, interval = 0.1, movie.name = "competing_model.gif")
saveGIF({
equ(1,0)
}, interval = 0.25, movie.name = "species1_alone.gif")
equ <- NULL
equ <- function(x1,x2){
gr <-1.1
num_gen <- 30
generation <- 1:num_gen
N1 <- rep (0, num_gen)
N2 <- rep (0, num_gen)
a12 <- 0.6
a21 <- 1.2
K1 <- 100
K2 <- 120
N1[1] <- x1
N2[1] <- x2
for (i in 2:num_gen) {
N1[i] = N1[i-1] + (3.2* N1[i-1] * ((K1-N1[i-1]-(a12*N2[i-1]))/K1))
N2[i] = N2[i-1] + (gr* N2[i-1] * ((K2-N2[i-1]-(a21*N1[i-1]))/K2))
generation[1]=1
print (N1[i])
if (N1[1]>0){
plot(N1~generation,typ="b",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}  else {
plot(N1~generation,typ="n",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}
print(N2[i])
if (N2[1]>0){
lines(N2~generation,typ="b",col=3,ylim=c(0,min(c(K1+20,K2+20))),ylab="N")} else {
plot(N2~generation,typ="n",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}
}
}
saveGIF({
equ(6,6)
}, interval = 0.1, movie.name = "competing_model.gif")
saveGIF({
equ(1,0)
}, interval = 0.25, movie.name = "species1_alone.gif")
saveGIF({
equ(0,1)
}, interval = 0.25, movie.name = "species2_alone.gif")
equ <- function(x1,x2){
gr <-1.1
num_gen <- 30
generation <- 1:num_gen
N1 <- rep (0, num_gen)
N2 <- rep (0, num_gen)
a12 <- 0.6
a21 <- 1.2
K1 <- 100
K2 <- 120
N1[1] <- x1
N2[1] <- x2
for (i in 2:num_gen) {
N1[i] = N1[i-1] + (3.2* N1[i-1] * ((K1-N1[i-1]-(a12*N2[i-1]))/K1))
N1[i] >= 0
N2[i] = N2[i-1] + (gr* N2[i-1] * ((K2-N2[i-1]-(a21*N1[i-1]))/K2))
generation[1]=1
print (N1[i])
if (N1[1]>0){
plot(N1~generation,typ="b",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}  else {
plot(N1~generation,typ="n",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}
print(N2[i])
if (N2[1]>0){
lines(N2~generation,typ="b",col=3,ylim=c(0,min(c(K1+20,K2+20))),ylab="N")} else {
plot(N2~generation,typ="n",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}
}
}
saveGIF({
equ(1,0)
}, interval = 0.25, movie.name = "species1_alone.gif")
equ <- function(x1,x2){
gr <-1.1
num_gen <- 30
generation <- 1:num_gen
N1 <- rep (0, num_gen)
N2 <- rep (0, num_gen)
a12 <- 0.6
a21 <- 1.2
K1 <- 100
K2 <- 120
N1[1] <- x1 >= 0
N2[1] <- x2 >= 0
for (i in 2:num_gen) {
N1[i] = N1[i-1] + (3.2* N1[i-1] * ((K1-N1[i-1]-(a12*N2[i-1]))/K1))
N2[i] = N2[i-1] + (gr* N2[i-1] * ((K2-N2[i-1]-(a21*N1[i-1]))/K2))
generation[1]=1
print (N1[i])
if (N1[1]>0){
plot(N1~generation,typ="b",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}  else {
plot(N1~generation,typ="n",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}
print(N2[i])
if (N2[1]>0){
lines(N2~generation,typ="b",col=3,ylim=c(0,min(c(K1+20,K2+20))),ylab="N")} else {
plot(N2~generation,typ="n",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}
}
}
saveGIF({
equ(6,6)
}, interval = 0.1, movie.name = "competing_model.gif")
equ <- function(x1,x2){
gr <-1.1
num_gen <- 30
generation <- 1:num_gen
N1 <- rep (0, num_gen)
N2 <- rep (0, num_gen)
a12 <- 0.6
a21 <- 1.2
K1 <- 100
K2 <- 120
N1[1] <- x1
N2[1] <- x2
for (i in 2:num_gen) {
N1[i] = N1[i-1] + (3.2* N1[i-1] * ((K1-N1[i-1]-(a12*N2[i-1]))/K1))
N2[i] = N2[i-1] + (gr* N2[i-1] * ((K2-N2[i-1]-(a21*N1[i-1]))/K2))
generation[1]=2
print (N1[i])
if (N1[1]>0){
plot(N1~generation,typ="b",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}  else {
plot(N1~generation,typ="n",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}
print(N2[i])
if (N2[1]>0){
lines(N2~generation,typ="b",col=3,ylim=c(0,min(c(K1+20,K2+20))),ylab="N")} else {
plot(N2~generation,typ="n",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}
}
}
saveGIF({
equ(6,6)
}, interval = 0.1, movie.name = "competing_model.gif")
equ <- function(x1,x2){
gr <-1.1
num_gen <- 30
generation <- 1:num_gen
N1 <- rep (0, num_gen)
N2 <- rep (0, num_gen)
a12 <- 0.6
a21 <- 1.2
K1 <- 100
K2 <- 120
N1[1] <- x1
N1[i] >=0
N2[1] <- x2
N2[i] >=0
for (i in 2:num_gen) {
N1[i] = N1[i-1] + (3.2* N1[i-1] * ((K1-N1[i-1]-(a12*N2[i-1]))/K1))
N2[i] = N2[i-1] + (gr* N2[i-1] * ((K2-N2[i-1]-(a21*N1[i-1]))/K2))
generation[1]=1
print (N1[i])
if (N1[1]>0){
plot(N1~generation,typ="b",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}  else {
plot(N1~generation,typ="n",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}
print(N2[i])
if (N2[1]>0){
lines(N2~generation,typ="b",col=3,ylim=c(0,min(c(K1+20,K2+20))),ylab="N")} else {
plot(N2~generation,typ="n",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}
}
}
saveGIF({
equ(6,6)
}, interval = 0.1, movie.name = "competing_model.gif")
equ <- function(x1,x2){
gr <-1.1
num_gen <- 30
generation <- 1:num_gen
N1 <- rep (0, num_gen)
N2 <- rep (0, num_gen)
a12 <- 0.6
a21 <- 1.2
K1 <- 100
K2 <- 120
N1[1] <- x1
N2[1] <- x2
for (i in 2:num_gen) {
N1[i] = N1[i-1] + (3.2* N1[i-1] * ((K1-N1[i-1]-(a12*N2[i-1]))/K1)) >= 0
N2[i] = N2[i-1] + (gr* N2[i-1] * ((K2-N2[i-1]-(a21*N1[i-1]))/K2)) >= 0
generation[1]=1
print (N1[i])
if (N1[1]>0){
plot(N1~generation,typ="b",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}  else {
plot(N1~generation,typ="n",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}
print(N2[i])
if (N2[1]>0){
lines(N2~generation,typ="b",col=3,ylim=c(0,min(c(K1+20,K2+20))),ylab="N")} else {
plot(N2~generation,typ="n",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}
}
}
saveGIF({
equ(6,6)
}, interval = 0.1, movie.name = "competing_model.gif")
saveGIF({
equ(6,6)
}, interval = 0.1, movie.name = "competing_model.gif")
equ <- function(x1,x2){
gr <-1.1
num_gen <- 30
generation <- 1:num_gen
N1 <- rep (0, num_gen)
N2 <- rep (0, num_gen)
a12 <- 0.6
a21 <- 1.2
K1 <- 100
K2 <- 120
N1[1] <- x1
N2[1] <- x2
for (i in 2:num_gen) {
N1[i] = N1[i-1] + (3.2* N1[i-1] * ((K1-N1[i-1]-(a12*N2[i-1]))/K1))
N2[i] = N2[i-1] + (gr* N2[i-1] * ((K2-N2[i-1]-(a21*N1[i-1]))/K2))
generation[1]=1
print (N1[i])
if (N1[1]>0){
plot(N1~generation,typ="b",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}  else {
plot(N1~generation,typ="n",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}
print(N2[i])
if (N2[1]>0){
lines(N2~generation,typ="b",col=3,ylim=c(0,min(c(K1+20,K2+20))),ylab="N")} else {
plot(N2~generation,typ="n",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}
}
}
saveGIF({
equ(6,6)
}, interval = 0.1, movie.name = "competing_model.gif")
saveGIF({
equ(1,0)
}, interval = 0.25, movie.name = "species1_alone.gif")
saveGIF({
equ(1,0)
}, interval = 0.25, movie.name = "species1_alone.gif")
saveGIF({
equ(0,1)
}, interval = 0.25, movie.name = "species2_alone.gif")
knitr::opts_chunk$set(echo = TRUE)
equ <- function(x1,x2){
gr <-1.1
num_gen <- 30
generation <- 1:num_gen
N1 <- rep (0, num_gen)
N2 <- rep (0, num_gen)
a12 <- 0.6
a21 <- 1.2
K1 <- 100
K2 <- 120
N1[1] <- x1
N2[1] <- x2
for (i in 2:num_gen) {
N1[i] = N1[i-1] + (3.2* N1[i-1] * ((K1-N1[i-1]-(a12*N2[i-1]))/K1))
N2[i] = N2[i-1] + (gr* N2[i-1] * ((K2-N2[i-1]-(a21*N1[i-1]))/K2))
generation[1]=1
print (N1[i])
if (N1[1]>0){
plot(N1~generation,typ="b",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}  else {
plot(N1~generation,typ="n",ylim=c(0,min(c(K1+20,K2+20))),ylab="N")
}
print(N2[i])
if (N2[1]>0){
lines(N2~generation,typ="b",col=3,ylim=c(0,min(c(K1+20,K2+20))),ylab="N")}
}
}
saveGIF({
equ(1,0)
}, interval = 0.25, movie.name = "species1_alone.gif")
library(animation)
saveGIF({
equ(1,0)
}, interval = 0.25, movie.name = "species1_alone.gif")
saveGIF({
equ(0,1)
}, interval = 0.25, movie.name = "species2_alone.gif")
saveGIF({
equ(6,6)
}, interval = 0.1, movie.name = "competing_model.gif")
saveGIF({
equ(1,0)
}, interval = 0.1, movie.name = "species1_alone.gif")
saveGIF({
equ(0,1)
}, interval = 0.1, movie.name = "species2_alone.gif")
help({r})
help(r)
student
data(student)
data('student')
students<-read.table('D:/R_WD/Git linked/2022RisFUN-Mo/Statistics/Data-statistic/students.txt',header=T, sep="\t", dec='.')
student
students
write.table(Student, file = "D:/R_WD/Git linked/2022RisFUN-Mo/Statistics/Data-statistic/students.txt", sep = "\t", row.names=T)
write.table(Student, file = "D:/R_WD/Git linked/2022RisFUN-Mo/Statistics/Data-statistic/students.txt", sep = "\t", row.names=T)
Student <- write.table(Student, file = "D:/R_WD/Git linked/2022RisFUN-Mo/Statistics/Data-statistic/students.txt", sep = "\t", row.names=T)
# dataset hypotheses?
x<-students$height
y<-students$shoesize
s<-students[,1:2] # a matrix
# Pearson correlation
# cor(x,y)
# cor(s)
cor.test(x,y)
ggplot(students, aes(x = height, y = shoesize)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
library (psych)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(car)
ggplot(students, aes(x = height, y = shoesize)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
source("D:/R_WD/Git linked/2022RisFUN-Mo/Statistics/statistics.R")
