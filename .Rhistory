t_value = (mean(A)-mean(B))/(aq*((1/length(A))+(1/(length(B)))))
df= length(A)+length(B)-2
p= pt(t_value, df, lower.tail = T)
paste('t=', t_value, ', degree_of_freedom=', df, ' , p = ', p)
}
else{t_value = (mean(A)-mean(B))/((var(A)/length(A)+var(B)/length(B))^0.5)
df=((var(A)/length(A)+var(B)/length(B))^2)/( (var(A)/length(A))^2/(length(A)-1)+ (var(B)/length(B))^2/(length(B)-1) )
p= pt(t_value, df, lower.tail = T)
paste('t=', t_value, ', degree_of_freedom=', df, ' , p = ', p)
}
}
var.test(en.L8, wa.L8)
TATest(en.L8, wa.L8, TRUE)
TATest(en.L8, wa.L8, TRUE)
TATest(en.L3,en.L8, TRUE)
var.test(en.L3,en.L8)
Rairuoho <- read.table("D:/R_WD/Git linked/2022RisFUN-Mo/Statistics/Data-statistic/rairuoho.txt", header=T, sep="\t")
rairuoho <- subset(Rairuoho[,1:11]) # leave the wanted column by specify the range we want
Rairuoho.trans <- rairuoho %>% pivot_longer(cols=starts_with("day"),
names_to = "day",
names_prefix = "day",
values_to = "length",
values_drop_na = "TRUE") %>% unite("sp_coor", 4:5, sep = "_", remove = TRUE) %>% mutate(treatment = replace(treatment, treatment =="nutrient", "enriched"))
head(Rairuoho.trans, 3)
str(Rairuoho.trans)
library (psych)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(car)
knitr::opts_chunk$set(echo = TRUE)
TATest <- NULL
TATest <- function(A, B, var.equal = c('TRUE', 'FALSE')){
aq <- NULL
if(var.equal == TRUE){
aq = ((length(A)-1)*var(A)+(length(B)-1)*var(B))/(length(A)+length(B)-2)
t_value = (mean(A)-mean(B))/(aq*((1/length(A))+(1/(length(B)))))
df= length(A)+length(B)-2
p= pt(t_value, df, lower.tail = T)
paste('t=', t_value, ', degree_of_freedom=', df, ' , p = ', p)
}
else{t_value = (mean(A)-mean(B))/((var(A)/length(A)+var(B)/length(B))^0.5)
df=((var(A)/length(A)+var(B)/length(B))^2)/( (var(A)/length(A))^2/(length(A)-1)+ (var(B)/length(B))^2/(length(B)-1) )
p= pt(t_value, df, lower.tail = T)
paste('t=', t_value, ', degree_of_freedom=', df, ' , p = ', p)
}
}
TATest(en.L8, wa.L8, TRUE)
day.8L <- Rairuoho.trans$day == "8"
treatment.all <- NULL
treatment.all <- ggplot(Rairuoho.trans, aes(x = day, y = length, color = treatment)) + geom_boxplot() + xlab("Day") + ylab("Length") + ggtitle("Treatments between Rairuoho") + guides(color = guide_legend(title = "Treatment"))
Rairuoho <- read.table("D:/R_WD/Git linked/2022RisFUN-Mo/Statistics/Data-statistic/rairuoho.txt", header=T, sep="\t")
rairuoho <- subset(Rairuoho[,1:11]) # leave the wanted column by specify the range we want
Rairuoho.trans <- rairuoho %>% pivot_longer(cols=starts_with("day"),
names_to = "day",
names_prefix = "day",
values_to = "length",
values_drop_na = "TRUE") %>% unite("sp_coor", 4:5, sep = "_", remove = TRUE) %>% mutate(treatment = replace(treatment, treatment =="nutrient", "enriched"))
library(tidyverse)
library (psych)
library(gridExtra)
Rairuoho <- read.table("D:/R_WD/Git linked/2022RisFUN-Mo/Statistics/Data-statistic/rairuoho.txt", header=T, sep="\t")
rairuoho <- subset(Rairuoho[,1:11]) # leave the wanted column by specify the range we want
Rairuoho.trans <- rairuoho %>% pivot_longer(cols=starts_with("day"),
names_to = "day",
names_prefix = "day",
values_to = "length",
values_drop_na = "TRUE") %>% unite("sp_coor", 4:5, sep = "_", remove = TRUE) %>% mutate(treatment = replace(treatment, treatment =="nutrient", "enriched"))
head(Rairuoho.trans, 3)
str(Rairuoho.trans)
treatment.all <- NULL
treatment.all <- ggplot(Rairuoho.trans, aes(x = day, y = length, color = treatment)) + geom_boxplot() + xlab("Day") + ylab("Length") + ggtitle("Treatments between Rairuoho") + guides(color = guide_legend(title = "Treatment"))
treatment.all
treatment.bed <- NULL
treatment.bed <- treatment.all + facet_wrap( ~ bed)
treatment.bed
day.8L <- Rairuoho.trans$day == "8"
Length8 <- Rairuoho.trans[day.8L,]
head (Length8, 3)
en.L8 <- Length8[Length8$treatment == "enriched", ]$length
wa.L8 <- Length8[Length8$treatment == "water", ]$length
T8.treatment <- t.test(en.L8, wa.L8, paired = FALSE, alternative = "two.sided", var.equal = FALSE)
T8.treatment
day.3L <- Rairuoho.trans$day == "3"
Length3 <- Rairuoho.trans[day.3L,]
en.L3 <- Length3[Length3$treatment == "enriched", ]$length
wa.L3 <- Length3[Length3$treatment == "water", ]$length
T3.treatment <- t.test(en.L3, wa.L3, paired = FALSE, alternative = "two.sided", var.equal = FALSE)
T3.treatment
mould8L <- c("mould1", "mould2")
m8L <- filter(Length8, bed %in% mould8L)
paper8L <- c("paper4", "paper8")
p8L <- filter(Length8, bed %in% paper8L)
TATest <- NULL
TATest <- function(A, B, var.equal = c('TRUE', 'FALSE')){
aq <- NULL
if(var.equal == TRUE){
aq = ((length(A)-1)*var(A)+(length(B)-1)*var(B))/(length(A)+length(B)-2)
t_value = (mean(A)-mean(B))/(aq*((1/length(A))+(1/(length(B)))))
df= length(A)+length(B)-2
p= pt(t_value, df, lower.tail = T)
paste('t=', t_value, ', degree_of_freedom=', df, ' , p = ', p)
}
else{t_value = (mean(A)-mean(B))/((var(A)/length(A)+var(B)/length(B))^0.5)
df=((var(A)/length(A)+var(B)/length(B))^2)/( (var(A)/length(A))^2/(length(A)-1)+ (var(B)/length(B))^2/(length(B)-1) )
p= pt(t_value, df, lower.tail = T)
paste('t=', t_value, ', degree_of_freedom=', df, ' , p = ', p)
}
}
TATest(en.L8, wa.L8, TRUE)
t.test(en.L8, wa.L8)
TATest <- NULL
TATest <- function(A, B, var.equal = c('TRUE', 'FALSE')){
aq <- NULL
if(var.equal == TRUE){
aq = ((length(A)-1)*var(A)+(length(B)-1)*var(B))/(length(A)+length(B)-2)
t_value = (mean(A)-mean(B))/(aq*((1/length(A))+(1/(length(B)))))
df= length(A)+length(B)-2
p= pt(t_value, df, lower.tail = T)
paste('t=', t_value, ', degree_of_freedom=', df, ' , p = ', p)
}
else{t_value = (mean(A)-mean(B))/((var(A)/length(A)+var(B)/length(B))^0.5)
df=((var(A)/length(A)+var(B)/length(B))^2)/( (var(A)/length(A))^2/(length(A)-1)+ (var(B)/length(B))^2/(length(B)-1) )
p= pt(t_value, df, lower.tail = T)
paste('t=', t_value, ', degree_of_freedom=', df, ' , p = ', p)
}
}
TATest(en.L8, wa.L8, TRUE)
t.test(en.L8, wa.L8)
TATTest <- function(A, B)){
TATTest <- function(A, B){
t_value = (mean(A)-mean(B))/((var(A)/length(A)+var(B)/length(B))^0.5)
df=((var(A)/length(A)+var(B)/length(B))^2)/( (var(A)/length(A))^2/(length(A)-1)+ (var(B)/length(B))^2/(length(B)-1) )
p= pt(t_value, df, lower.tail = T)
paste('t=', t_value, ', degree_of_freedom=', df, ' , p = ', p)
}
TATTest(en.L8, wa.L8, TRUE)
TATTest(en.L8, wa.L8)
t.test(en.L8, wa.L8)
var.test(en.L8, wa.L8)
TATest(en.L8, wa.L8, FALSE)
var.test(en.L8, wa.L8)
TATest(en.L8, wa.L8, FALSE)
t.test(en.L8, wa.L8)
TATest <- function(A, B, var.equal = c('TRUE', 'FALSE')){
aq <- NULL
if(var.equal == TRUE){
aq = ((length(A)-1)*var(A)+(length(B)-1)*var(B))/(length(A)+length(B)-2)
t_value = (mean(A)-mean(B))/(aq*((1/length(A))+(1/(length(B)))))
df= length(A)+length(B)-2
p= pt(t_value, df, lower.tail = T)
paste('t=', t_value, ', degree_of_freedom=', df, ' , p = ', p)
}
else{t_value = (mean(A)-mean(B))/((var(A)/length(A)+var(B)/length(B))^0.5)
df=((var(A)/length(A)+var(B)/length(B))^2)/( (var(A)/length(A))^2/(length(A)-1)+ (var(B)/length(B))^2/(length(B)-1) )
p= pt(t_value, df, lower.tail = F)
paste('t=', t_value, ', degree_of_freedom=', df, ' , p = ', p)
}
}
TATest(en.L8, wa.L8, FALSE)
t.test(en.L8, wa.L8)
p= pt(t_value, df, lower.tail = T)
TATest <- function(A, B, var.equal = c('TRUE', 'FALSE')){
aq <- NULL
if(var.equal == TRUE){
aq = ((length(A)-1)*var(A)+(length(B)-1)*var(B))/(length(A)+length(B)-2)
t_value = (mean(A)-mean(B))/(aq*((1/length(A))+(1/(length(B)))))
df= length(A)+length(B)-2
p= pt(t_value, df, lower.tail = T)
paste('t=', t_value, ', degree_of_freedom=', df, ' , p = ', p)
}
else{t_value = (mean(A)-mean(B))/((var(A)/length(A)+var(B)/length(B))^0.5)
df=((var(A)/length(A)+var(B)/length(B))^2)/( (var(A)/length(A))^2/(length(A)-1)+ (var(B)/length(B))^2/(length(B)-1) )
p= pt(t_value, df, lower.tail = T)
paste('t=', t_value, ', degree_of_freedom=', df, ' , p = ', p)
}
}
TATest(en.L8, wa.L8, FALSE)
t.test(en.L8, wa.L8)
var.test(en.L3, wa.L3)
TATest(en.L3, wa.L3, FALSE)
t,test(en.L3, wa.L3)
t.test(en.L3, wa.L3)
pt(-0.647366, 45.9975, lower.tail = T)
?pt
? data(prof.salary)
? prof.salary
?prof.salary
??prof.salary
library("MBESS")
data(prof.salary)
View(prof.salary)
View(prof.salary)
install.packages('sandwich')
AWARD <- read.csv("D:/R_WD/Git linked/2022RisFUN-Mo/Statistics/Data-statistic/poisson_sim.csv")
AWARD <- within(AWARD,{
prog <- factor(prog, levels=1:3, labels=c("General", "Academic","Vocational"))
id <- factor(id)
})
summary(AWARD)
AWARD.hist <- ggplot(AWARD, aes(num_awards, fill=prog)) +
geom_histogram(binwidth = .5,  position="dodge")
library(Hmisc)
library(corrplot)
library(MASS)
library(car)
library(interactions)
library(yarrr)
library(tidyr)
library(readr)
library(lme4)
library (lmerTest)
library(nlme)
library(gvlma)
library(simpleboot)
library(DAAG)
library(bootstrap)
library(MBESS)
library(leaps)
library(sandwich)
library(dplyr)
knitr::purl('linear-1129.Rmd', documentation = F)
xaringanExtra::use_clipboard()
xfun::embed_file('linear-1129.Rmd')
xfun::embed_file('D:/R_WD/Git linked/2022RisFUN-Mo/Statistics/Data-statistic/shagLPI.csv')
xfun::embed_file('D:/R_WD/Git linked/2022RisFUN-Mo/Statistics/Data-statistic/Weevil_damage.csv')
library(Hmisc)
library(corrplot)
library(MASS)
library(car)
library(interactions)
library(yarrr)
library(tidyr)
library(readr)
library(lme4)
library (lmerTest)
library(nlme)
library(gvlma)
library(simpleboot)
library(DAAG)
library(bootstrap)
library(MBESS)
library(leaps)
library(sandwich)
library(dplyr)
students<-read.table('D:/R_WD/Git linked/2022RisFUN-Mo/Statistics/Data-statistic/students.txt',header=T, sep="\t", dec='.')
lm.cat<-lm(shoesize~gender, data=students)
anova(lm.cat)
iris.lm<-lm(Petal.Width ~ Species, data=iris)
summary(iris.lm)
anova(iris.lm)
pirateplot(formula = time ~ cleaner + type,
data = poopdeck,
ylim = c(0, 150),
xlab = "Cleaner",
ylab = "Cleaning Time (minutes)",
main = "poopdeck data",
back.col = gray(.97),
cap.beans = TRUE,
theme = 2)
pirateplot(time ~ cleaner,
data = poopdeck,
theme = 2,
cap.beans = TRUE,
main = "formula = time ~ cleaner")
# Step 1: aov object with time as DV and cleaner as IV
cleaner.aov <- aov(formula = time ~ cleaner, data = poopdeck)
# Step 2: Look at the summary of the anova object
summary(cleaner.aov)
# Step 3: Conduct post-hoc tests
TukeyHSD(cleaner.aov)
# Step 4: Create a regression object
cleaner.lm <- lm(formula = time ~ cleaner, data = poopdeck)
summary(cleaner.lm)
# Step 1: aov object with time as DV and cleaner and type as IV
cleaner.type.aov <- aov(formula = time ~ cleaner + type, data = poopdeck)
# Step 2: Get ANOVA table with summary()
summary(cleaner.type.aov)
# Step 3: Conduct post-hoc tests
TukeyHSD(cleaner.type.aov)
# Step 4: Look at regression coefficients
cleaner.type.lm <- lm(formula = time ~ cleaner + type, data = poopdeck)
summary(cleaner.type.lm)
# Step 1: Create ANOVA object with interactions
cleaner.type.int.aov <- aov(formula = time ~ cleaner * type, data = poopdeck)
# Step 2: Look at summary table
summary(cleaner.type.int.aov)
# Step 4: Calculate regression coefficients
cleaner.type.int.lm <- lm(formula = time ~ cleaner * type, data = poopdeck)
summary(cleaner.type.int.lm)
cat_plot(cleaner.type.int.lm, pred = cleaner, modx = type, interval = TRUE)
# Step 1: Calculate regression object with lm()
time.lm <- lm(formula = time ~ type + cleaner, data = poopdeck)
# Type I ANOVA - aov()
time.I.aov <- aov(time.lm)
# or anova(time.lm)
# Type II ANOVA - Anova(type = 2)
time.II.aov <- car::Anova(time.lm, type = 2)
# Type III ANOVA - Anova(type = 3)
time.III.aov <- car::Anova(time.lm, type = 3)
# Are observations in the poopdeck data balanced?
with(poopdeck, table(cleaner, type))
names(cleaner.type.int.aov)
poopdeck$int.fit <- cleaner.type.int.aov$fitted.values
poopdeck$me.fit <- cleaner.type.aov$fitted.values
mean(abs(poopdeck$int.fit - poopdeck$time))
mean(abs(poopdeck$me.fit - poopdeck$time))
shapiro.test(cleaner.type.int.aov$residuals) # test our residuals vs a normal distribution
bartlett.test(cleaner.type.int.aov$residuals ~ interaction(cleaner, type), data = poopdeck) # test variance of our residuals in the different groups.
AWARD <- read.csv("D:/R_WD/Git linked/2022RisFUN-Mo/Statistics/Data-statistic/poisson_sim.csv")
AWARD <- within(AWARD,{
prog <- factor(prog, levels=1:3, labels=c("General", "Academic","Vocational"))
id <- factor(id)
})
summary(AWARD)
AWARD.hist <- ggplot(AWARD, aes(num_awards, fill=prog)) +
geom_histogram(binwidth = .5,  position="dodge")
AWARD.hist
rairuoho<-read.table('D:/R_WD/Git linked/2022RisFUN-Mo/Statistics/Data-statistic/rairuoho.txt',header=T, sep="\t", dec=".")
rairuoho$ID<-rownames(rairuoho)
rai<-rairuoho %>% pivot_longer(day3:day8, names_to = "day", values_to = "length")
rai$day<-parse_number(rai$day)
rai
ggplot(rai, aes(x = day, y = length)) +
geom_point() +
scale_x_continuous(breaks = 0:9)+
facet_wrap(~ID)
lmer.rai<-lmer(length ~ day + (1|ID), data=rai, REML=TRUE) # REML default
summary(lmer.rai)
newdata <- crossing(ID = rai %>% pull(ID),
day = 3:8)
head(newdata)
newdata2 <- newdata %>%
mutate(length = predict(lmer.rai, newdata))
# plot
ggplot(rai, aes(x = day, y = length)) +
geom_line(data = newdata2,
color = 'blue') +
geom_point() +
scale_x_continuous(breaks = 0:7) +
facet_wrap(~ID) +
labs(y = "Length", x = "Days")
lmer.rai<-lmer(length ~ day + (Day|ID), data=rai, REML=TRUE) # REML default
lmer.rai<-lmer(length ~ day + (1|ID), data=rai, REML=TRUE) # REML default
summary(lmer.rai)
newdata <- crossing(ID = rai %>% pull(ID),
day = 3:8)
head(newdata)
newdata2 <- newdata %>%
mutate(length = predict(lmer.rai, newdata))
# plot
ggplot(rai, aes(x = day, y = length)) +
geom_line(data = newdata2,
color = 'blue') +
geom_point() +
scale_x_continuous(breaks = 0:7) +
facet_wrap(~ID) +
labs(y = "Length", x = "Days")
lmer.rai<-lmer(length ~ day + (1|ID), data=rai, REML=TRUE) # REML default
summary(lmer.rai)
newdata <- crossing(ID = rai %>% pull(ID),
day = 3:8)
head(newdata)
newdata2 <- newdata %>%
mutate(length = predict(lmer.rai, newdata))
# plot
ggplot(rai, aes(x = day, y = length)) +
geom_line(data = newdata2,
color = 'blue') +
geom_point() +
scale_x_continuous(breaks = 0:7) +
facet_wrap(~ID) +
labs(y = "Length", x = "Days")
lmer.rai<-lmer(length ~ day + (1|ID) + (Day|ID), data=rai, REML=TRUE) # REML default
lmer.rai<-lmer(length ~ day + (day|ID), data=rai, REML=TRUE) # REML default
summary(lmer.rai)
newdata <- crossing(ID = rai %>% pull(ID),
day = 3:8)
head(newdata)
newdata2 <- newdata %>%
mutate(length = predict(lmer.rai, newdata))
# plot
ggplot(rai, aes(x = day, y = length)) +
geom_line(data = newdata2,
color = 'blue') +
geom_point() +
scale_x_continuous(breaks = 0:7) +
facet_wrap(~ID) +
labs(y = "Length", x = "Days")
lmer.rai<-lmer(length ~ day + (day|1), data=rai, REML=TRUE) # REML default
lmer.rai<-lmer(length ~ day + (1|day), data=rai, REML=TRUE) # REML default
summary(lmer.rai)
newdata <- crossing(ID = rai %>% pull(ID),
day = 3:8)
head(newdata)
newdata2 <- newdata %>%
mutate(length = predict(lmer.rai, newdata))
# plot
ggplot(rai, aes(x = day, y = length)) +
geom_line(data = newdata2,
color = 'blue') +
geom_point() +
scale_x_continuous(breaks = 0:7) +
facet_wrap(~ID) +
labs(y = "Length", x = "Days")
library(vegan)
library(ape)
library(ade4)
library(gclus)
library(qgraph)
library(factoextra)
library(fpc)
library(ggplot2)
library(gridExtra)
library(e1071)
library(corrplot)
library(tree)
library(rpart)
library(rattle)
library(randomForest)
library(caret)
library(devtools)
library(mvabund)
library(mvpart) # install_github("cran/mvpart", force = T) # after devtools
install.packages("mvpart")
install.packages(mvpart)
install.packages("mvpart")
install.packages("MVPARTwrap")
install_github("cran/mvpart", force = T)
install_github("cran/mvpart", force = T)
install_github("cran/MVPARTwrap", force = T)
install_github("cran/mvpart", force = T)
install_github("cran/mvpart", force = T)
library(mvpart)
devtools::install_github("cran/mvpart", force = T)
install_github("cran/MVPARTwrap", force = T)
library (devtools)
install_github("cran/mvpart", force = T)
install_github("cran/mvpart")
library(mvpart)
tree1<-tree(Species~Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data=iris)
summary(tree1 )
plot(tree1)
text(tree1)
tree2 <- rpart(Species ~ ., data=iris, method="class")
fancyRpartPlot(tree2, main="Iris")
# Extra to exciting your curiosity
iris.rf=randomForest(Species~., data=iris, importance=TRUE, proximity=TRUE, ntree=500)
# Required number of trees gives errors for each species and the average for all species (black):
plot(iris.rf,lty=2)
# Misclassification error rates:
iris.rf$confusion
# Importance of individual predictor variables for classification (the further the value is on the right of the plot, the more important):
varImpPlot(iris.rf)
# The membership of a particular class as a function of a variable value can be displayed with this
partialPlot(iris.rf,iris,Petal.Width,"setosa")
# we can predict unclassified observations. We make up some sample new observations from the original dataset to save some time importing (the first three rows are P. setosa, lets see if RandomForest gets that right:
newobs=iris[1:3,1:4]
predict(iris.rf,newobs)
# This last plot conveys the confidence in your predictions for each individual sample. Colors represent species and points are samples. In this case, many samples can be predicted with great certainty (1) and only few classifications are questionable (approaching 0)
plot(margin(iris.rf))
data(doubs)
spe.norm<-decostand(doubs$fish[-8,], 'nor')
env<-doubs$env[-8,]
# par(mfrow=c(1,2))
spe.ch.mvpart <-
mvpart(data.matrix(spe.norm)~.,
env,
margin = 0.08,
cp=0,
xv='min', # try 'pick' best number, '1se'
xval=nrow(spe),
xvmult = 100
)
devtools::install_github("cran/mvpart", force = T)
library (devtools)
mvpart()
devtools::install_github("cran/mvpart")
data(doubs)
spe.norm<-decostand(doubs$fish[-8,], 'nor')
env<-doubs$env[-8,]
# par(mfrow=c(1,2))
spe.ch.mvpart <-
mvpart(data.matrix(spe.norm)~.,
env,
margin = 0.08,
cp=0,
xv='min', # try 'pick' best number, '1se'
xval=nrow(spe),
xvmult = 100
)
# lda
set.seed(10)
fit.lda <- train(Species~., data=idataset, method="lda", metric=metric, trControl=control)
install.packages("mvpart")
library(devtools)
install_github("cran/MVPARTwrap", force = T)
data(doubs)
spe.norm<-decostand(doubs$fish[-8,], 'nor')
library(devtools)
install_github("cran/mvpart", force = T)
data(doubs)
spe.norm<-decostand(doubs$fish[-8,], 'nor')
data(doubs)
spe.norm<-decostand(doubs$fish[-8,], 'nor')
decostand
mvpart
install_github("cran/MVPARTwrap", force = T)
Y
# lda
set.seed(10)
fit.lda <- train(Species~., data=idataset, method="lda", metric=metric, trControl=control)
