install.packages(environment.Rmd)
library(leaflet)
setwd("D:/R_WD")
knitr::purl('environment.Rmd', documentation = 0)
xfun::embed_file('environment.Rmd')
xfun::embed_file('environment.R')
xfun::embed_file('Data/reef_fish.xlsx')
install.packages('knitr')
install.packages("knitr")
install.packages('xfun')
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages('abc')
install.packages('vegan')
install.packages('format')
install.packages('formatR')
getwd
getwd()
fish<-read.table(file.choose (), header = TRUE,sep="\t", dec=".")
fish<-read.table(reef_fish.txt, header = TRUE,sep="\t", dec=".")
fish<-read.table('reef_fish.txt', header = TRUE,sep="\t", dec=".")
fish
View(fish)
git fetch
getwd
getwd()
getwd()
library (dplyr)
install.packages(dplyr)
install.packages('dplyr')
summarised <- summarise(iris, Mean.Width = mean(Sepal.Width))
iris
library (dplyr)
iris
summarised <- summarise(iris, Mean.Width = mean(Sepal.Width))
head(summarised)
# by column names
selected1 <- dplyr::select(iris, Sepal.Length, Sepal.Width, Petal.Length)
head(selected1)
# by column range
selected2 <- dplyr::select(iris, Sepal.Length:Petal.Length)
head(selected2, 4)
# by column range number
selected3 <- dplyr::select(iris,c(2:5))
head(selected3)
selected4 <- dplyr::select(iris, -Sepal.Length, -Sepal.Width)
# Select setosa species
filtered1 <- filter(iris, Species == "setosa" )
head(filtered1,3)
# Select versicolor species with Sepal width more than 3
filtered2 <- filter(iris, Species == "versicolor", Sepal.Width > 3)
tail(filtered2)
#To create a column “Greater.Half” which stores a logical vector
mutated1 <- mutate(iris, Greater.Half = Sepal.Width > 0.5 * Sepal.Length)
tail(mutated1)
table(mutated1$Greater.Half)
# Sepal Width by ascending order
arranged1 <- arrange(iris, Sepal.Width)
head(arranged1)
# Sepal Width by descending order
arranged2 <- arrange(iris, desc(Sepal.Width))
head(arranged2)
# Mean sepal width by Species
gp <- group_by(iris, Species)
gp.mean <- summarise(gp,Mean.Sepal = mean(Sepal.Width))
gp.mean
#To select the rows with conditions
iris %>% filter(Species == "setosa",Sepal.Width > 3.8)
iris  %>% group_by(Species) %>% summarise(Mean.Length = mean(Sepal.Length))
```{.r .distill-force-highlighting-css}
library(dplyr)
iris
M.Wsum <- summarise(iris, Mean.Width = mean(Sepal.Width))
head(M.Wsum)
column.select1 <- dplyr::select(iris, Sepal.Length, Sepal.Width, Petal.Length)
head(column.select1)
column.select2 <- dplyr::(iris, Sepal.Length:Petal.Length)
column.select2 <- dplyr::select(iris, Sepal.Length:Petal.Length)
head(column.select2, 4)
head(column.select2, 7)
filtered.duo[c(24:27), c(1:3)]
library(dplyr)
iris
#Summarize
M.Wsum <- summarise(iris, Mean.Width = mean(Sepal.Width))
head(M.Wsum)
#Select
column.select1 <- dplyr::select(iris, Sepal.Length, Sepal.Width, Petal.Length) #select specific columns
head(column.select1)
column.select2 <- dplyr::select(iris, Sepal.Length:Petal.Length) #select range column
head(column.select2, 4) #number after comma is how much data in your selected you want to view
column.select3 <- dplyr::select(iris, c(2:5)) #select column range by numbers
head(column.select3) #if not specify, it shows first six data in the data set
column.exclude1 <- dplyr::select(iris, -Sepal.Length, -Sepal.Width) #hide specific column by "-" mark
head(column.exclude1)
#Filter
filtred.one <- filter(iris, Species == "setosa") # "==", means: equals to
head(filtered.one, 3)
head(filtred.one, 3)
filtered.duo <- filter(iris, Species == "versicolor", Sepal.Width > 3) #multiple condition filtration
filtered.duo[c(24:27), c(1:3)]
filtered.duo[r(24:27), c(1:3)]
filtered.duo[c(24:27), c(1,3)]
filtered.duo <- filter(iris, Species == "versicolor", Sepal.Width > 3) #multiple condition filtration
tail(filtered.duo, 2) #show last 2 row
filtered.duo[c(3:6), c(1,3)]
#Mutate
mutate.new <- mutate(iris, GReater.Half = Sepal.Width > 0.5 *Sepal.Length)
tail(mutated.new)
#Mutate
mutated.new <- mutate(iris, GReater.Half = Sepal.Width > 0.5 * Sepal.Length)
tail(mutated.new)
tail(iris)
#Mutate
mutated.new <- mutate(iris, Greater.Half = Sepal.Width > 0.5 * Sepal.Length) #create a column "Greater.Half" which stores a logical vector
table(mutated.new$Greater.Half)
#Arrange
arranged.ascen <- arrange(iris, Sepal.Width) #ascending order by Sepal Width
head(arranged.ascen, 3)
arranged.descen <- arrange(iris, desc(Petal.Width)) #descending order by Petal.Width
tail(arranged.descen, 5)
tail(arranged.ascen, 2)
head(arranged.descen, 4)
#Group_by
group.spe <- group_by(iris, Species)
summarise(group.spe)
group.mean <- summarise(group.mean, Mean.Sepal = mean(Sepal.Width))
group.mean <- summarise(group.spe, Mean.Sepal = mean(Sepal.Width))
group.mean
#Pipe operator
iris %>% filter(species == "setosa",Sepal.Width > 3.8)
#Pipe operator
iris %>% filter(Species == "setosa",Sepal.Width > 3.8)
iris
#Pipe operator
iris %>% filter(Species == "setosa",Sepal.Width > 3.8)
iris %>% group_by(Species) %>% summarise(Mean.SL =mean(Sepal.Length))
iris.filtered <-iris %>% group_by(Species) %>% summarise(Mean.SL =mean(Sepal.Length))
head(iris.filtered)
#Pipe operator
iris.fil <- iris %>% filter(Species == "setosa",Sepal.Width > 3.8)
iris %>% group_by(Species) %>% summarise(Mean.SL =mean(Sepal.Length))
rm(list)
rm("list")
rm
rm(list=ls())
library (tidyr)
install.packages("tidyr")
library (tidyr)
Tw.Corals <-read.table('Data/tw_corals.txt', header=T, sep='\t', dec='.')
head("Tw.Corals")
head(Tw.Corals)
Tw.Corals
rm(list=ls())
Tw.corals <-read.table('Data/tw_corals.txt', header=T, sep='\t', dec='.')
Tw.corals
Tw.corals
# clean objects in memory
rm(list=ls())
xfun::embed_file('Data/reef_fish.xlsx')
xfun::embed_file('Data\reef_fish.xlsx')
xfun::embed_file('Data\reef_fish.xlsx')
xfun::embed_file('Data\reef_fish.xlsx')
xfun::embed_file('Data/reef_fish.xlsx')
xfun::embed_file('DATA/reef_fish.xlsx')
Tw.corals <-read.table('Data/tw_corals.txt', header=T, sep='\t', dec='.')
Tw.corals <-read.table('DATA/tw_corals.txt', header=T, sep='\t', dec='.')
xfun::embed_file('environment.R')
xfun::embed_file('environment.R')
xfun::embed_file('DATA/reef_fish.xlsx')
xfun::embed_file('DATA/reef_fish.xlsx')
knitr::purl('environment.Rmd', documentation = 0)
xfun::embed_file('environment.Rmd')
xfun::embed_file('environment.R')
knitr::purl('environment.Rmd', documentation = 0)
xfun::embed_file('environment.Rmd')
knitr::purl('environment.Rmd', documentation = 0)
xfun::embed_file('environment.Rmd')
xfun::embed_file('environment.R')
knitr::purl('environment.Rmd', documentation = 0)
xfun::embed_file('environment.Rmd')
xfun::embed_file('environment.R')
xfun::embed_file('DATA/reef_fish.xlsx')
knitr::purl('environment.Rmd', documentation = 0)
xfun::embed_file('environment.Rmd')
xfun::embed_file('environment.R')
xfun::embed_file('Data/reef_fish.xlsx')
Tw.corals <-read.table('Data/tw_corals.txt', header=T, sep='\t', dec='.')
Tw.corals
Tw.corals <-read.table('Data/tw_corals.txt', header=T, sep='\t', dec='.')
Tw.corals
read_excel('Data/reef_fish.xlsx') # automatically print on my screen
readxl::read_xlsx('Data/reef_fish.xlsx') # automatically print on my screen
fish<-readxl::read_xlsx('Data/reef_fish.xlsx') # store my table in an object called `fish`
readxl:: read_xlsx ('Data/reef_fish.xlsx')
readxl:: read_xlsx ('Data/reef_fish.xlsx') # automatically print on my screen
getwd
getwd()
readxl:: read_xlsx ('Data/reef_fish.xlsx') # automatically print on my screen
## # R update (to run in R native GUI only)
## if(!require(installr)) {
##   install.packages("installr"); require(installr)}
## updateR()
## # install the package `abc` with its name
## install.packages("abc")
## # function are case sensitive
## # all information after `#` is ignored
## # it is call a comment. Commenting is very important
## # use/load the package `abc` with its name
## library("abc")
## # Install & load `vegan` package
## install.packages('vegan')
## library('vegan')
# simple help on the use of a function
median
## # detailed help on the use of a function
## ?median # alternative 1
## help(median) # alternative 2
## # using a keyword for search
## ??median
## # get your current working directory
## getwd()
## # set your current working directory
## setwd()
## # Use R as a calculator
## 3+2 # addition
## 3-2 # substraction
## 3*2 # multiplication
## 3/2 # division
## 3^3 # power
## log(2) # logarithm
## exp(2) # exponential
## (5 + 3) / 4 # define priority using () or {}
## pi*4 # common function
# my current list is empty
ls()
# I create and list 3 objects
a<-'corals' # create an object 'a' containing 'corals'
b<-'are' # create an object 'b' containing 'are'
c<-'cool'# create an object 'c' containing 'cool'
ls() # list objects 'a', 'b', 'c'
# clean objects in memory
rm(list=ls())
# 1. using the package `readxl`
# 2. reading my `reef_fish.xlsx` in my working directory
# 3. importing `reef_fish.xlsx` in a `fish` object
library(readxl) # load the package `readxl'
readxl:: read_xlsx ('Data/reef_fish.xlsx') # automatically print on my screen
fish<-readxl:: read_xlsx ('Data/reef_fish.xlsx') # store my table in an object called `fish`
fish # print my object `fish`
# importing a .txt file
fish<-read.table('Data/reef_fish.txt', header=T, sep='\t', dec='.')
## # import file by path name
## fish<-read.table ("D:/.../Topic 1/Data/reef_fish.txt",header = TRUE,sep="\t", dec=".")# long version
## fish<-read.table("D:/.../Topic 1/Data/reef_fish.txt", TRUE, "\t",".")# short version
## fish<-read.table(file.choose (), header = TRUE,sep="\t", dec=".")
## # Too fast you need to try by yourself?
## # Maybe a look at ?write.table may help
## q()
# import data set and create an object in R studio + simple plot
fish<-read.table('Data/reef_fish.txt', header=T, sep='\t', dec='.')
barplot(fish$richness, main="Top 10 reef fish Richness (Allen, 2000)", horiz=TRUE, names.arg=fish$country, cex.names=0.5, las=1)
rm(list=ls())
Tw,corals_wide <- pivot_wider(TW_corals_long, names_from = Region, values_from = Richness)
Tw.corals_wide <- pivot_wider(TW_corals_long, names_from = Region, values_from = Richness)
Tw,corals_wide <- pivot_wider(Tw.corals_long, names_from = Region, values_from = Richness)
Tw.corals_wide <- pivot_wider(Tw.corals_long, names_from = Region, values_from = Richness)
Tw.corals_long <- TW_corals %>% pivot_longer(Southern_TW:Northern_Is, names_to = "Region", values_to = "Richness")
Tw.corals <-read.table('Data/tw_corals.txt', header=T, sep='\t', dec='.')
Tw.corals
Tw.corals_long <- Tw.corals %>% pivot_longer(Southern_TW:Northern_Is, names_to = "Region", values_to = "Richness")
Tw.corals_long
Tw,corals_wide <- pivot_wider(Tw.corals_long, names_from = Region, values_from = Richness)
Tw.corals_wide <- pivot_wider(Tw.corals_long, names_from = Region, values_from = Richness)
Tw.corals_wide
income.world<-read.table('Data/metoo.txt',header=T, sep="\t", dec=".", na.strings = "n/a")
income.world
income.world_long <- income.world %>% pivot_longer(cols = -state,
names_to = c("gender", "work")
names_sep = "-"
income.world_long <- income.world %>% pivot_longer(cols = -state,
names_to = c("gender", "work")
names_sep = "-"
income.world_long <- income.world %>% pivot_longer(cols = -state,
names_to = c("gender", "work"),
names_sep = "-",
values = "income")
income.world_long
income.world_long <- income.world %>% pivot_longer(cols = -state,
names_to = c("gender", "work"),
names_sep = "-",
values = "income")
income.world_long <- income.world %>% pivot_longer(cols = -state,
names_to = c("gender", "work"),
names_sep = "-",
values_to = "income")
income.world_long
income.world_long <- income.world %>% pivot_longer(cols = -state,
names_to = c("gender", "work"),
names_sep = "-",
values_to = "income",
na.strings = "n/a")
income.world_long <- income.world %>% pivot_longer(cols = -state,
names_to = c("gender", "work"),
names_sep = "-",
values_to = "income")
income.world_long %>% pivot_wider(names_from = c(gender,work),
values_from = income,
names_sep = ".")
income.world_long_var <- income.world %>%  pivot_longer(cols = -1,
names_to = "var1",
values_to = "income")
income.world_long_var
income.world_sep <- income_long_var %>%  separate(col = var1,
sep = "_",
into = c("gender", "work"))
library (tidyr)
TW_corals<-read.table('Data/tw_corals.txt', header=T, sep='\t', dec='.')
TW_corals
TW_corals_long <- TW_corals %>% pivot_longer(Southern_TW:Northern_Is, names_to = "Region", values_to = "Richness")
# TW_corals_long <-TW_corals %>% pivot_longer(cols = everything(), names_to = "Region", values_to = "Richness")
TW_corals_long
TW_corals_wide <- pivot_wider(TW_corals_long, names_from = Region, values_from = Richness)
TW_corals_wide
income<-read.table('Data/metoo.txt',header=T, sep="\t", dec=".", na.strings = "n/a")
income
income_long <- income %>%  pivot_longer(cols = -state,
names_to = c("gender","work"),
names_sep = "_",
values_to = "income")
income_long
income_long %>% pivot_wider(names_from = c(gender,work),
values_from = income,
names_sep = ".")
# Let's first create a delimited table
income_long_var <- income %>%  pivot_longer(cols = -1,
names_to = "var1",
values_to = "income")
income_long_var
# Split var1 column into two columns
income_sep <- income_long_var %>%  separate(col = var1,
sep = "_",
into = c("gender", "work"))
income_sep
income_long_var %>% separate_rows(var1, sep = "_")
income.world_long <- income.world %>% pivot_longer(cols = -state,
names_to = c("gender", "work"),
names_sep = "_",
values_to = "income")
income.world_long
income.world_long %>% pivot_wider(names_from = c(gender,work),
values_from = income,
names_sep = ".")
income.world_long_var
income.world_sep <- income_long_var %>%  separate(col = var1,
sep = "_",
into = c("gender", "work"))
income.world_sep
income.world_long_var %>% separate_rows(var1, sep = "_")
income.world_long_var
income.world_long_var <- income.world %>%  pivot_longer(cols = -1,
names_to = "var1",
values_to = "income")
income.world_long_var
income.world_long_var %>% separate_rows(var1, sep = "_")
income
income_long <- income %>%  pivot_longer(cols = -state,
names_to = c("gender","work"),
names_sep = "_",
values_to = "income")
income_long
income.world<-read.table('Data/metoo.txt',header=T, sep="\t", dec=".", na.strings = "n/a")
income.world
income.world_long <- income.world %>% pivot_longer(cols = -state,
names_to = c("gender", "work"),
names_sep = "_",
values_to = "income") #separation is underbar,"_"
income.world_long
income.world_long %>% pivot_wider(names_from = c(gender,work),
values_from = income,
names_sep = ".")
income.world_sep2 <- income %>% pivot_longer(cols = -1,
names_to = "var1",
values_to = "income")
income.world_sep2
income.world_sep2 <- income %>% pivot_longer(cols = -1,
names_to = "var1",
values_to = "income") %>%
income.world_sep2
income.world_sep2 <- income %>% pivot_longer(cols = -1,
names_to = "var1",
values_to = "income") %>%
income.world_sep2
income.world_sep2 <- income %>% pivot_longer(cols = -1,
names_to = "var1",
values_to = "income")%>%
income.world_sep2
income.world_sep2 <- income %>% pivot_longer(cols = -1,
names_to = "var1",
values_to = "income")
income.world_sep2 <- income %>% pivot_longer(cols = -1,
names_to = "var1",
values_to = "income")%>%
income.world_sep2
income.world
#create a dummy variable for manipulation
income.world_long_var <- income.world %>%  pivot_longer(cols = -1,
names_to = "var1",
values_to = "income")
#create a dummy variable for manipulation
income.world_long_var <- income.world %>%  pivot_longer(cols = -1,
names_to = "var1",
values_to = "income")
income.world_long_var
rm(list=ls())
install.packages("tidyr")
library (tidyr)
#Pivoting
Tw.corals <-read.table('Data/tw_corals.txt', header=T, sep='\t', dec='.')
Tw.corals
#turn wide table to long table
Tw.corals_long <- Tw.corals %>% pivot_longer(Southern_TW:Northern_Is, names_to = "Region", values_to = "Richness")
Tw.corals_long
#turn long table to wide table
Tw.corals_wide <- pivot_wider(Tw.corals_long, names_from = Region, values_from = Richness)
Tw.corals_wide
income.world<-read.table('Data/metoo.txt',header=T, sep="\t", dec=".", na.strings = "n/a")
income.world
#rearrange variables by separating them
income.world_long <- income.world %>% pivot_longer(cols = -state,
names_to = c("gender", "work"),
names_sep = "_",
values_to = "income") #separation is underbar,"_"
income.world_long
#you can also merge those back
income.world_long %>% pivot_wider(names_from = c(gender,work),
values_from = income,
names_sep = ".")
#create a dummy variable for manipulation
income.world_long_var <- income.world %>%  pivot_longer(cols = -1,
names_to = "var1",
values_to = "income")
income.world_long_var
#split dummy "var1" to two columns
income.world_sep <- income_long_var %>%  separate(col = var1,
sep = "_",
into = c("gender", "work"))
rm(list=ls())
library (tidyr)
#Pivoting
Tw.corals <-read.table('Data/tw_corals.txt', header=T, sep='\t', dec='.')
Tw.corals
#turn wide table to long table
Tw.corals_long <- Tw.corals %>% pivot_longer(Southern_TW:Northern_Is, names_to = "Region", values_to = "Richness")
Tw.corals_long
#turn long table to wide table
Tw.corals_wide <- pivot_wider(Tw.corals_long, names_from = Region, values_from = Richness)
Tw.corals_wide
income.world<-read.table('Data/metoo.txt',header=T, sep="\t", dec=".", na.strings = "n/a")
income.world
#rearrange variables by separating them
income.world_long <- income.world %>% pivot_longer(cols = -state,
names_to = c("gender", "work"),
names_sep = "_",
values_to = "income") #separation is underbar,"_"
income.world_long
#you can also merge those back
income.world_long %>% pivot_wider(names_from = c(gender,work),
values_from = income,
names_sep = ".")
#create a dummy variable for manipulation
income.world_long_var <- income.world %>%  pivot_longer(cols = -1,
names_to = "var1",
values_to = "income")
income.world_long_var
#split dummy "var1" to two columns
income.world_sep <- income_long_var %>%  separate(col = var1,
sep = "_",
into = c("gender", "work"))
#split dummy "var1" to two columns
income.world_sep <- income.world_long_var %>%  separate(col = var1,
sep = "_",
into = c("gender", "work"))
income.world_sep
#also you can separate them in original column by split them in rows
income.world_long_var %>% separate_rows(var1, sep = "_")
